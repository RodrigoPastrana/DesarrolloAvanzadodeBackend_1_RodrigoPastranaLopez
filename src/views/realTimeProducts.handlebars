<section>
  <h2>Crear producto</h2>

  <form id="createForm" enctype="multipart/form-data" class="card" style="padding:16px;">
    <div class="form-grid">
      <div class="form-field">
        <label for="title">Título</label>
        <input id="title" name="title" placeholder="Ej: Teclado Mecánico" required />
      </div>

      <div class="form-field">
        <label for="code">Code único</label>
        <input id="code" name="code" placeholder="Ej: KB-001" required />
      </div>

      <div class="form-field">
        <label for="price">Precio</label>
        <input id="price" name="price" type="number" placeholder="Ej: 49999" required />
      </div>

      <div class="form-field">
        <label for="status">Estado</label>
        <select id="status" name="status">
          <option value="true" selected>Activo</option>
          <option value="false">Inactivo</option>
        </select>
      </div>

      <div class="form-field">
        <label for="stock">Stock</label>
        <input id="stock" name="stock" type="number" placeholder="Ej: 20" required />
      </div>

      <div class="form-field">
        <label for="category">Categoría</label>
        <input id="category" name="category" placeholder="Ej: periféricos" required />
      </div>

      <div class="form-field form-span-2">
        <label for="description">Descripción</label>
        <textarea id="description" name="description" rows="4" placeholder="Características, detalles, etc." required></textarea>
      </div>

      <div class="form-field form-span-2">
        <label for="thumbnails">Imágenes</label>
        <input id="thumbnails" name="thumbnails" type="file" accept="image/*" multiple />
      </div>
    </div>

    <button type="submit" class="btn btn-success">Crear</button>
  </form>

  <h2 style="margin-top:24px;">Lista en tiempo real</h2>
  <div id="productsGrid" class="grid"></div>
</section>

<style>
  .card{padding:20px !important}
  .form-grid{display:grid;grid-template-columns:repeat(2,minmax(260px,1fr));column-gap:20px;row-gap:16px}
  .form-field{display:flex;flex-direction:column}
  .form-field label{font-size:.9rem;color:#374151;margin-bottom:6px}
  .form-span-2{grid-column:1 / -1}
  textarea{resize:vertical;min-height:100px}
</style>

<div id="toast"></div>
<script src="/socket.io/socket.io.js"></script>
<script>
  const toastEl = document.getElementById('toast');
  let toastTimer;
  function showToast(msg, type='info', ms=1800) {
    toastEl.textContent = msg;
    toastEl.className = '';
    toastEl.classList.add(type, 'show');
    clearTimeout(toastTimer);
    toastTimer = setTimeout(() => toastEl.classList.remove('show'), ms);
  }

  const socket = io();
  socket.on('errorMessage', (msg) => showToast(msg, 'error', 2600));

  const grid = document.getElementById('productsGrid');
  let firstUpdateDone = false;

  function renderProducts(products) {
    grid.innerHTML = products.map(p => {
      const id = p._id || p.id;
      const thumbs = Array.isArray(p.thumbnails) ? p.thumbnails : [];
      const firstImg = thumbs.length ? `<img class="img" src="${thumbs[0]}" alt="${p.title ?? ''}">` : '';
      return `
        <div class="card" data-id="${id}">
          ${firstImg}
          <h3 style="margin:10px 0 6px 0;">${p.title ?? ''}</h3>
          <div class="muted">${p.description ?? ''}</div>
          <div style="margin-top:6px;"><strong>Precio:</strong> $${p.price ?? 0}</div>
          <div><strong>Stock:</strong> <span class="stock-val">${p.stock ?? 0}</span></div>
          <div><strong>Code:</strong> <code>${p.code ?? ''}</code></div>
          <div><strong>Categoría:</strong> ${p.category ?? ''}</div>
          ${thumbs.length ? `<div class="muted" style="margin-top:6px;">Imgs: ${thumbs.length}</div>` : ``}
          <div style="display:flex; gap:8px; margin-top:10px;">
            <button class="btn btn-danger btn-del" data-id="${id}">Eliminar</button>
            <button class="btn btn-primary btn-stock" data-id="${id}">Modificar stock</button>
          </div>
        </div>
      `;
    }).join('');

    if (firstUpdateDone) showToast('Lista actualizada', 'success');
    firstUpdateDone = true;
  }
  socket.on('productsUpdated', renderProducts);

  const createForm = document.getElementById('createForm');
  createForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const fd = new FormData(createForm);
    showToast('Creando producto…', 'info', 1400);
    try {
      const r = await fetch('/api/products', { method: 'POST', body: fd });
      const j = await r.json().catch(()=>({}));
      if (!r.ok) return showToast(j?.error || 'No se pudo crear', 'error', 2400);
      createForm.reset();
      showToast('Producto creado ✔️', 'success');
    } catch (err) {
      showToast('Error de red: ' + err.message, 'error', 2400);
    }
  });

  grid.addEventListener('click', (e) => {
    if (e.target.classList.contains('btn-del')) {
      const id = e.target.dataset.id;
      if (!id) return;
      if (confirm('¿Eliminar este producto?')) socket.emit('deleteProduct', id);
    }
    if (e.target.classList.contains('btn-stock')) {
      const card = e.target.closest('.card');
      const id = e.target.dataset.id;
      if (!id || !card) return;
      const current = card.querySelector('.stock-val')?.textContent ?? '0';
      const nv = prompt('Nuevo stock:', current);
      if (nv === null) return;
      socket.emit('setStock', { id, stock: nv });
    }
  });
</script>

<style>
  #toast{position:fixed;right:16px;bottom:16px;padding:10px 14px;border-radius:10px;color:#fff;background:#111827;opacity:0;transform:translateY(12px);transition:all .25s ease;pointer-events:none;z-index:9999;box-shadow:0 6px 18px rgba(0,0,0,.18)}
  #toast.show{opacity:1;transform:translateY(0)}
  #toast.success{background:#16a34a}
  #toast.error{background:#dc2626}
  #toast.info{background:#2563eb}
</style>
